@ModellingHypotheses{PlaneStrain, Axisymmetrical, Tridimensional};

@Gradient StrainStensor eto;
eto.setGlossaryName("Strain");
@Gradient real s;
s.setEntryName("Suction");

@Flux StressStensor sig;
sig.setGlossaryName("Stress");
@Flux real Sr;
Sr.setEntryName("Saturation");

@TangentOperatorBlocks{dsig_ddeto, dsig_dds, dSr_dds};

//! number of real state variables
@IntegerConstant isvs_size = 10;

@StateVariable real e;
@StateVariable real em;
@StateVariable real eM;
@StateVariable real SrM;
@StateVariable real a_scan;
@StateVariable real re;

/*!
 * number of real state variables associated with the Runge-Kutta
 * algorithm.
 */
@IntegerConstant rk_isvs_size = 4;
@StateVariable real rk_isvs[rk_isvs_size];
rk_isvs.setEntryName("RungeKutta_InternalStateVariables");

@ExternalStateVariable stress pr;
pr.setEntryName("AirPressure");

//! the consistent matrix
@LocalVariable tfel::math::tmatrix<7, 8, real> Dtg;

@Includes {
#include "generalmod.h"
#include "BentoniteBehaviourUtilities.hxx"
}

@Sources {
#include "generalmod.cc"
}

@Integrator {
  using size_type = unsigned short;
  // consistency checks
  static_assert(isvs_size == Hypoplasti_unsat_expansive_thermal::c_nstatev);
  static_assert(rk_isvs_size == Hypoplasti_unsat_expansive_thermal::nrkf_statev);
  static_assert(params_size == Hypoplasti_unsat_expansive_thermal::c_nparms);
  static_assert(rk_params_size == Hypoplasti_unsat_expansive_thermal::nrkf_parms);
  // material coefficients
  std::array<real, params_size> params = {
      phi,     lam_star, kap_star, n_star, nu,     ns,   ls, nt, lt,  m,        alpha_s, kappa_m,
      sm_star, em_star,  csh,      se_ref, em_ref, Tref, at, bt, aer, lambdap0, p_t};
  // parameters of the Runge-Kutta algorithm
  std::array<real, rk_params_size> rk_params = {err_sig, h_min, ni, sv_rkf_zero, rkt};
  // gradients
  auto g = bentonite_behaviour_utilities::convert_gradients_from_mfront(eto, s, T);
  auto dg = bentonite_behaviour_utilities::convert_gradients_from_mfront(deto, ds, dT);
  // thermodynamic forces
  auto tf = bentonite_behaviour_utilities::convert_thermodynamic_forces_from_mfront(sig, Sr);
  for (size_type i = 0; i != 3; ++i) {
    tf[i] += pr;
  }
  // state variables
  real dummy_variable = 0;
  std::array<real, isvs_size> isvs = {e, s, Sr, T, em, eM, SrM, a_scan, re, dummy_variable};
  // integration
  int kinc = 0;  // global iteration number.
  // D. Mašín' implementation
  Hypoplasti_unsat_expansive_thermal wb;
  wb.initialise_parameters(params.data());
  if (tfel::math::ieee754::fpclassify(rk_isvs[3]) == FP_ZERO) {
    // call the initialisation step
    // here we expect that dtsub can be exactly zero only at the very first time step
    rk_isvs = {0, 0, 1, 0};
    if (wb.soil_model(g.data(), tf.data(), isvs.data(), dg.data(), dt, Dtg.data(), params.data(),
                      rk_isvs.data(), rk_params.data(), 0, kinc) != 0) {
      return FAILURE;
    }
  }
  if (wb.soil_model(g.data(), tf.data(), isvs.data(), dg.data(), dt, Dtg.data(), params.data(),
                    rk_isvs.data(), rk_params.data(), 1, kinc) != 0) {
    return FAILURE;
  }
  // export thermodynamic forces
  bentonite_behaviour_utilities::convert_thermodynamic_forces_to_mfront(sig, Sr, tf);
  for (size_type i = 0; i != 3; ++i) {
    sig[i] -= pr + dpr;
  }
  // export internal state variables
  e = isvs[0];
  em = isvs[4];
  eM = isvs[5];
  SrM = isvs[6];
  a_scan = isvs[7];
  re = isvs[8];
}  // end of @Integrator

@TangentOperator {
  if (smt != CONSISTENTTANGENTOPERATOR) {
    return false;
  }
  bentonite_behaviour_utilities::convert_tangent_operator(dsig_ddeto, dsig_dds, dSr_dds, Dtg);
}  // end of @TangentOperator
