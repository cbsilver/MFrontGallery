@DSL Implicit;
@Behaviour OrthotropicDruckerPerfectPlasticity2090T3_Cazacu2001;
@Author Thomas Helfer;
@Date 15/01/2018;
@Description{
  Implementation of a perfect plastic
  behaviour based on the Drucker yield
  criterion.
}

@OrthotropicBehaviour<Plate>;

@Brick StandardElasticity;
@Epsilon 1.e-16;
@Theta 1;

@StateVariable strain p;
p.setGlossaryName("EquivalentPlasticStrain");

@ElasticMaterialProperties {150e9,0.3};

@Parameter c = 1.285;
c.setEntryName("DruckerCoefficient");

@Parameter s0 = 150e6;
s0.setGlossaryName("YieldStrength");

@Parameter a[6]  = {0.586,1.05,0.823,0.96,1,1};
a.setEntryName("J2OOrthotropicCoefficient");
@Parameter b[11] = {1.44,0.061,-1.302,-0.281,-0.375,1,1,1,1,0.445,1};
b.setEntryName("J3OOrthotropicCoefficient");

@LocalVariable bool bp;

@InitializeLocalVariables{
  constexpr const auto e = real(1)/6;
  constexpr const auto sqrt3 = Cste<real>::sqrt3;
  const auto sigel = computeElasticPrediction();
  const auto J2O   = computeJ2O(sigel,a);
  const auto J3O   = computeJ3O(sigel,b);
  const auto seqel = sqrt3*pow(J2O*J2O*J2O-c*J3O*J3O,e);
  bp = seqel>s0;
}

@Integrator{
  constexpr const auto e = real(1)/6;
  constexpr const auto sqrt3 = Cste<real>::sqrt3;
  const stress seps = 1.e-10*young;
  if(!bp){
    // elastic loading, nothing to be done
    return true;
  }
  const auto  J2O  = computeJ2O(sig,a);
  if(J2O>seps*seps){
    const auto  J2O_2 = J2O*J2O;
    const auto  J2O_3 = J2O_2*J2O;
    const auto  J2O_4 = J2O_2*J2O_2;
    const auto  J2O_6 = J2O_4*J2O_2;
    const auto  J3O   = computeJ3O(sig,b);
    const auto  J3O_2 = J3O*J3O;
    const auto  J3O_4 = J3O_2*J3O_2;
    const auto& dJ2O  = computeJ2ODerivative(sig,a);
    const auto  d2J2O = computeJ2OSecondDerivative(sig,a);
    const auto  dJ3O  = computeJ3ODerivative(sig,b);
    const auto  d2J3O = computeJ3OSecondDerivative(sig,b);
    const auto  s6   = J2O_3-c*J3O_2;
    const auto  seq  = sqrt3*pow(s6,e);
    const auto  dseq_dJ2O = J2O_2/(2*s6)*seq;
    const auto  dseq_dJ3O = -c*J3O/(3*s6)*seq;
    const auto  n  = dseq_dJ2O*dJ2O+dseq_dJ3O*dJ3O;
    const auto  d2seq_dJ2OdJ2O =
      seq*(-4*J2O*J3O_2*c-J2O_4)/(4*J3O_4*c*c-8*J2O_3*J3O_2+4*J2O_6);
    const auto  d2seq_dJ3OdJ3O =
      seq*(-2*J3O_2*c*c-3*J2O_3*c)/(9*J3O_4*c*c-18*J2O_3*J3O_2+9*J2O_6);
    const auto  d2seq_dJ2OdJ3O =
      seq*(5*J2O_2*J3O*c)/(6*J3O_4*c*c-12*J2O_3*J3O_2+6*J2O_6);
    // d2f=f*d(df/f)+df*df/f
    const auto  dn = eval(d2seq_dJ2OdJ2O*(dJ2O^dJ2O)+
			  dseq_dJ2O*d2J2O+
			  d2seq_dJ2OdJ3O*((dJ2O^dJ3O)+(dJ3O^dJ2O))+
			  d2seq_dJ3OdJ3O*(dJ3O^dJ3O)+
			  dseq_dJ3O*d2J3O);
    feel        += dp*n;
    dfeel_ddeel += 2*mu*theta*dp*dn;
    dfeel_ddp    = n;
    fp           = (seq-s0)/young;
    dfp_ddeel    = 2*mu*theta*n/young;
    dfp_ddp      = 0;

  } else {
    // This case can happen for example at the first time step if the
    // elastic prediction directly leads to a plastic loading: at the
    // first iteration the stress is still zero.
    fp           = -s0/young;
    // this is arbitrary, but this avoids
    // a singularity in the  jacobian
    dfp_ddp      = 1;
  }
}
