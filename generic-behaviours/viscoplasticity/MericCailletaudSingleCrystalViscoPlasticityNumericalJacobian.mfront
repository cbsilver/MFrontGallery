@DSL Implicit;
@Behaviour MericCailletaudSingleCrystalViscoPlasticityNumericalJacobian;
@Author Thomas Helfer;
@Date 17 / 10 / 2019;
@Description {
}

@ModellingHypothesis Tridimensional;
@OrthotropicBehaviour;

@Algorithm NewtonRaphson_NumericalJacobian;
@PerturbationValueForNumericalJacobianComputation 1.e-7;
@Epsilon 1.e-14;
@Theta 1;

@Brick StandardElasticity{
  young_modulus1 : 208000,
  young_modulus2 : 208000,
  young_modulus3 : 208000,
  poisson_ratio12 : 0.3,
  poisson_ratio23 : 0.3,
  poisson_ratio13 : 0.3,
  shear_modulus12 : 80000,
  shear_modulus23 : 80000,
  shear_modulus13 : 80000
};

@CrystalStructure FCC;
@SlidingSystem<0, 1, -1>{1, 1, 1};
@InteractionMatrix{1, 1, 0.6, 1.8, 1.6, 12.3, 1.6};

@Parameter n = 10.0;
@Parameter K = 25.;
@Parameter tau0 = 66.62;
@Parameter Q = 11.43;
@Parameter b = 2.1;
@Parameter d = 494.0;
@Parameter C = 14363;

@StateVariable strain g[Nss];
g.setEntryName("ViscoplasticSlip");

@AuxiliaryStateVariable strain p[Nss];
p.setEntryName("EquivalentViscoplasticSlip");

@AuxiliaryStateVariable strain a[Nss];
a.setEntryName("BackStrain");

@Integrator {
  using size_type = unsigned short;
  const auto& ss = MericCailletaudSingleCrystalViscoPlasticityNumericalJacobianSlipSystems<real>::getSlipSystems();
  const auto& m = ss.him;
  real exp_bp[Nss];
  for (size_type i = 0; i != Nss; ++i) {
      const auto p_ = p[i] + theta * abs(dg[i]);
      exp_bp[i] = exp(-b * p_);
  }
  for (size_type i = 0; i != Nss; ++i) {
    const auto tau = sig | ss.mus[i];
    auto r = tau0;
    for (size_type j = 0; j != Nss; ++j) {
      r += Q * m(i, j) * (1 - exp_bp[j]);
    }
    const auto da =  //
        (dg[i] - d * a[i] * abs(dg[i])) / (1 + theta * d * abs(dg[i]));
    const auto x = C * (a[i] + theta * da);
    const auto f = max(abs(tau - x) - r, stress(0));
    if (f > 1.1 * K) {
      return false;
    }
    const auto sgn = tau - x > 0 ? 1 : -1;
    fg[i] -= dt * pow(f / K, n) * sgn;
    feel += dg[i] * ss.mus[i];
  }
}

@UpdateAuxiliaryStateVariables {
  using size_type = unsigned short;
  for (size_type i = 0; i != Nss; ++i) {
    p[i] += abs(dg[i]);
    const auto da =  //
        (dg[i] - d * a[i] * abs(dg[i])) / (1 + theta * d * abs(dg[i]));
    a[i] += da;
  }
}
