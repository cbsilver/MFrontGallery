@DSL       Implicit;
@Behaviour ImplicitNorton;
@Author    Thomas Helfer;
@Date      24/11/2016;
@Description{
  This file implements the Norton law, described as:
  "$$"
  "\left\{"
  "  \begin{aligned}"
  "    \tepsilonto   &= \tepsilonel+\tepsilonvis \\"
  "    \tsigma       &= \tenseurq{D}\,:\,\tepsilonel\\"
  "    \tdepsilonvis &= \dot{p}\,\tenseur{n} \\"
  "    \dot{p}       &= A\,\sigmaeq^{m}"
  "  \end{aligned}"
  "\right."
  "$$"
}

@ModellingHypotheses {".+"};
@Epsilon 1.e-16;
@Brick StandardElasticity;

@MaterialProperty stress young;
young.setGlossaryName("YoungModulus");
@MaterialProperty real nu;
nu.setGlossaryName("PoissonRatio");
@MaterialProperty real A;
A.setEntryName("NortonCoefficient");
@MaterialProperty real E;
E.setEntryName("NortonExponent");

@StateVariable strain p;
p.setGlossaryName("EquivalentViscoplasticStrain");

@LocalVariable stress mu;

@InitLocalVariables{
  mu = computeMu(young,nu);
}

@Integrator{
  const real eps = 1.e-12;
  const auto seq = sigmaeq(sig);
  const auto vp = A*pow(seq,E);
  const auto iseq = 1/max(seq,eps*young);
  const auto df_dseq = E*vp*iseq;
  const auto n = eval(3*deviator(sig)*iseq/2);
  // implicit system
  feel += dp*n;
  fp   -= vp*dt;
  // jacobian
  dfeel_ddeel += 2*mu*theta*dp*iseq*(Stensor4::M()-(n^n));
  dfeel_ddp    = n;
  dfp_ddeel   -= 2*mu*theta*df_dseq*dt*n;
} // end of @Integrator
